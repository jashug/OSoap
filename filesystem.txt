Hew pretty close to Linux/Posix.

file descriptors refer to a table of open file descriptions

open file descriptions can appear in multiple places in the fd table, and for multiple processes.
Share the same memory for these. Ex: fdtable = [{ofd}, {ofd}, ...]
open file descriptions store an offset.

representation of non-open files (inodes):
for directories, lookup children
for files, open (= turn into open file description)
file type: regular file, directory, (character) device, named pipe, symbolic link, socket.
owner, permissions, timestamps.
supposed to be in-sync with the permanent storage. Don't let two copies get out of sync.
id number unique to filesystem

splicing together filesystems needs a bit more thought, though Linux probably has it right
in Linux, it looks like you keep a table of mount points (roughly inodes) and the mounted filesystem
so that you can handle transitions as a step separate from in-filesystem lookup of children.

Files are identified by pair of filesystem instance and fs-instance-unique identifier.
The only way to travel between filesystems is by going through a mount point:
a mount point maps an (empty? maybe not necessarily) directory in one filesystem
onto (the root?) of another file system.

Bind mounts are cool, track root per-mount.

Will need to design a filesystem on top of IndexedDB.
IndexedDB is shared between tabs in the same origin; need some form of concurrency control.
Use a modified seqlock: make sure each transaction leaves the filesystem in a consistent state, such
that it could be removed from one tab and shifted to another.
When attaching to the fs, increment a counter, and store the value. As long as the counter stays at
this value, the filesystem has not been changed except by this tab, so all cached data remains consistent.
In each transaction, read the counter, abort if it is different than expected, raising a "fs lost" error.
When we lose the filesystem, we can get it back by incrementing the counter again, but we have to clear
any cached preconceptions about the state of the filesystem.
This system can probably be enhanced to provide a middle ground where some cached data can be kept.
(Such as, increment a counter whenever the directory tree changes, but not when files are written.)
