states: 'init', 'running', 'syscall', 'detached', 'zombie'

Processes/threads start in the 'init' state.
Here, the process has begun execution, but has not yet informed us of the location of its sysbuf.

The next thing a well-behaved process does is send the kernel a message with the sysbuf.
This moves the process to the 'running' state from the 'init' state.
If we are not in the 'init' state, (or the 'zombie' state, should never happen), that is if we are in 'running' or 'syscall',
  ignore the request and instead force-kill the process.

While the process is in the running state, the kernel should listen on the sysbuf for syscalls.
On receipt of a syscall, mark the process as in the 'syscall' state.

When the kernel is ready to respond, the process moves back to the 'running' state, and the kernel should listen again.
An exception is the case of the 'detach' syscall, which forgets the sysbuf and moves to the 'detached' state.

Finally, a well-behaved process sends the kernel a 'exit' message while it is in the 'detached' state.
This moves the process to the 'zombie' state, and records the exit code.

An exceptional case is the receipt of an Error from the process.
This cannot happen in the 'zombie' state.
If this happens while the process is in the 'running' state, we need to clean up the wait on the sysbuf.
If this happens in the 'init' or 'syscall' states, we do not need to clean up the wait on the sysbuf.
In all cases, the worker has already been released, and we should forget how to terminate it.
The process should be marked as having terminated abnormally (sigill or the like?) and moved to the 'zombie' state.

There may come a point where the kernel decides the process needs to die.
This can be because the process violated a contract and cannot be trusted to go quietly.
It may also be because the user requested it, "kill -SIGKILL".
If the process is in the 'zombie' state, this is a NOP.
Otherwise, terminate the associated worker.
If the process is in the 'running' state, we need to clean up the wait on the sysbuf.
The process should be marked as having terminated abnormally (sigkill) and moved to the 'zombie' state.
The above 2 lines are very similar to the receipt of an Error from the process.

To send a signal to a process.
(See the signals.txt document)
If the process is in the 'zombie' state, this is a NOP.
If the signal is SIGKILL, kill the process as described in the previous paragraph.
SIGSTOP and SIGCONT are also special.
If the signal is ignored, do nothing.
Signals can be either thread-specific or process-wide.
If a signal is blocked, or masked by a thread, we can't submit it.
Prefer threads in the 'syscall' state for 'sigwait', where this signal is acceptable.
Another option is to start a new thread to run the signal handler on. (Breaks POSIX semantics, closer to Windows)
If we do neither of the two above options, the signal becomes pending, and we put it on a queue (to be picked up at the next return from syscall).
At this point, we should set the signal bit in the flag word (request the process check for signals).
Then, threads in the 'syscall' state for interruptable syscalls, we can return EINTR and abort the syscall.

The interface for passing signals is, we set a bit in the flags word to indicate that there are signals to be handled.
Then the process calls a special syscall accepting one signal. This call can return "nothing do do" if there are no pending acceptable signals.
So, we can be optimistic in setting this bit whenever we queue a signal.

To kill a cooperating process with a signal, indicate that we have a signal to deliver, then when we respond
indicate that we want the process to go away, detach the syscall buffer (move to state 'detached').

=====

Threads start in the 'init' state, then move to 'running' on receipt of the sysbuf.
Then switch between 'syscall' and 'running'
Finally in the 'zombie' state, two things have to happen:
1. the user program has to acknowledge the exit and release the worker
2. the thread has to wait for another thread to call join, unless the thread was detached.
These two can happen in either order in theory; If we were to order them makes most sense to require the user program to acknowledge the exit before the thread can be joined.

Now, for processes.
A process starts with one thread.
Threads can create other threads, and all threads in a process are peers (there is no notion of a main thread, or parent thread).
When a thread calls exit (not pthread_exit), other threads may still be running.
We need to ask all the threads to release their workers immediately. This involves moving to the TURN_DETACHED state,
along with cancelling or completing any in-progress syscalls (since we will never need the return value).
When a thread calls pthread_exit, this is specific to the thread.
If there are other threads in the process, move to the zombie state, remember the return value. Or, if detached, clean up entirely.
If this is the only thread in the process, instead of immediately detaching we return from the syscall with the exit(0) flag set. This calls exit to orderly clean up the process.
The return value of a thread should only be accessed when the process is 'running' or 'syscall'. Thus on exit, we can leave the return value of all the threads we shut down as garbage.

Child processes become orphans, and are adopted by init.
If this process exiting causes any process group to become an orphaned process group, and if any member of the newly-orphaned process group is stopped, then a SIGHUP signal followed by a SIGCONT signal shall be sent to each process in the newly-orphaned process group.
If the process exiting is a controlling process (session leader for a session with a controlling terminal), send SIGHUP to the foreground process group, and release the controlling terminal.
Other things that should happen on process termination:
https://pubs.opengroup.org/onlinepubs/9699919799/functions/_Exit.html

An orphaned process group is one where every process in the group has a parent that is either in the same group or in a different session.

Threads in one process are stopped and continued all together.
